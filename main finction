#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<conio.h>
int x = 0, y = 0, z=1;
int map[15][15] = { 0 };		
// 定義的遊戲界面模型
int map_1[15][15] = { {0,0,1,1,1,0,0,0,0,0},{0,0,1,4,1,0,0,0,0,0},{0,0,1,2,1,1,1,1,0,0},{1,1,1,0,0,2,4,1,0,0},{1,4,0,2,3,1,1,1,0,0},{1,1,1,1,2,1,0,0,0,0},{0,0,0,1,4,1,0,0,0,0},{0,0,0,1,1,1,0,0,0,0},{0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0} };
int map_2[15][15] = { {1,1,1,1,1,1,1,1},{1,0,0,0,0,1,4,1},{1,0,0,0,0,1,4,1},{1,0,2,3,0,1,2,1},{1,2,1,0,0,2,0,1},{1,4,1,0,0,0,0,1},{1,4,1,0,0,0,0,1},{1,1,1,1,1,1,1,1} };
int map_3[15][15] = { {1,1,1,1,1,1,1,1,0,0},{1,0,0,1,4,0,4,1,0,0},{1,0,0,0,0,1,0,1,0,0},{1,0,1,0,2,0,0,1,0,0},{1,4,1,2,3,2,0,1,0,0},{1,1,0,0,2,0,0,1,0,0},{1,4,0,0,0,1,1,1,0,0},{1,1,1,1,1,1,1,1,0,0} ,{0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0} };
int map_4[15][15] = { {0,1,1,1,1,1,1,1,0,0},{0,1,0,0,0,0,0,1,1,1},{1,1,2,1,1,1,0,0,0,1},{1,0,3,0,2,0,0,2,0,1},{1,0,4,4,1,0,2,0,1,1},{1,1,4,4,1,0,0,0,1,0},{0,1,1,1,1,1,1,1,1,0} };
int map_5[15][15] = { {1,1,1,1,1,1,1,1,1,1,1},{1,1,1,1,0,0,0,2,0,4,1},{1,1,1,4,0,2,0,1,0,0,1},{1,1,1,1,1,1,1,4,1,0,1},{1,0,4,4,1,4,0,0,2,0,1},{1,0,2,1,1,3,1,0,2,0,1},{1,1,0,1,0,2,4,1,0,0,1},{1,0,0,2,0,0,0,0,0,1,1},{1,0,0,0,0,1,0,0,0,1,1},{1,1,1,1,1,1,1,1,1,1,1} };
int map_6[15][15] = { {1,1,1,1,1,1,1,1,1,1,1},{1,1,1,1,0,0,2,0,4,4,1},{1,4,0,0,0,0,2,0,0,0,1},{1,0,2,0,1,0,1,4,2,0,1},{1,0,0,1,1,2,1,1,1,1,1},{1,0,2,0,2,3,2,4,4,1,1},{1,0,0,1,1,2,1,1,1,1,1},{1,4,0,4,1,0,1,0,2,4,1},{1,0,0,2,0,0,2,0,4,1,1},{1,0,0,0,4,4,0,1,1,1,1},{1,1,1,1,1,1,1,1,1,1,1} };
int map_7[15][15] = { {1,1,1,1,1,1,1,1,1,1,1},{1,4,4,2,0,0,4,1,0,4,1},{1,4,3,2,0,0,0,1,4,4,1},{1,2,2,4,0,0,0,1,4,0,1},{1,0,0,0,2,2,0,2,0,0,1},{1,0,0,0,0,4,0,2,2,0,1},{1,1,1,1,1,1,2,2,0,0,1},{1,4,4,0,2,0,2,0,4,0,1},{1,0,4,0,0,2,0,0,0,0,1},{1,0,0,0,0,0,0,0,0,0,1},{1,1,1,1,1,1,1,1,1,1,1} };
int map_8[15][15] = { {1,1,1,1,1,1,1,1,1,1,1},{1,4,0,1,1,4,1,1,0,4,1},{1,0,0,4,1,0,1,4,0,0,1},{1,2,1,0,0,0,0,0,1,0,1},{1,0,0,2,0,2,0,0,0,0,1},{1,2,0,4,2,4,2,0,2,0,1},{1,0,0,1,0,2,0,0,2,0,1},{1,4,1,0,0,1,1,1,0,0,1},{1,1,0,0,1,0,0,0,0,0,1},{1,3,0,1,4,4,2,0,0,0,1},{1,1,1,1,1,1,1,1,1,1,1} };
int map_9[15][15] = { {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{1,4,0,4,1,4,4,0,4,4,1,4,4,4,1},{1,0,0,2,1,0,4,4,4,0,1,0,2,4,1},{1,0,2,0,1,0,0,4,0,0,1,2,0,2,1},{1,2,0,0,2,0,0,0,0,0,1,0,2,0,1},{1,4,0,4,1,0,2,0,2,0,2,0,0,4,1},{1,1,1,1,1,4,1,2,1,4,1,1,1,1,1},{1,4,4,4,1,1,1,0,1,1,1,4,4,4,1},{1,0,2,0,4,4,1,0,1,4,4,0,2,0,1},{1,0,2,0,1,1,1,0,1,1,1,2,0,2,1},{1,0,2,0,1,0,0,2,0,0,1,0,2,0,1},{1,0,0,1,0,0,2,2,2,0,0,1,0,0,1},{1,2,2,1,0,2,0,2,0,2,0,1,2,0,1},{1,0,0,0,0,0,0,3,0,0,0,0,0,0,1},{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1} };
int map_10[15][15] = { {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{1,4,0,0,0,1,1,4,1,1,4,2,0,4,1},{1,0,2,0,0,2,0,0,0,2,0,0,0,2,1},{1,2,0,2,0,1,0,0,0,1,0,0,0,0,1},{1,0,2,0,0,1,0,0,0,1,4,2,0,4,1},{1,0,0,0,1,1,1,0,1,1,1,1,1,1,1},{1,4,4,4,4,4,2,2,2,4,1,4,4,4,1},{1,0,0,0,0,0,2,3,2,4,1,4,4,4,1},{1,4,4,4,4,4,2,2,2,4,1,0,0,0,1},{1,0,0,0,1,1,1,0,1,1,1,0,0,0,1},{1,0,2,2,0,0,1,0,1,0,0,2,0,0,1},{1,0,2,0,0,0,1,0,1,0,0,2,0,0,1},{1,1,1,1,0,2,0,0,2,0,0,2,2,2,1},{1,4,0,0,0,0,1,4,1,0,0,0,0,0,1},{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1} };
int count1(int ,int );
int count2(int ,int);
int up();
int down();
int left();
int right();
int graphics(int ,int);
int find(int ,int);
int interface();
int move(int);
int b[15][15] = { 0 };
int i, q = 0, j = 0;//i為移動步數  q的目的用來判斷按Z鍵只能重複一次  j的目的是為了按下C鍵後能夠切到遊戲選單畫面
int result[10] = { 0 };
int main()
{
	int n, m,p;//n:計算星星數量m:到達星星之數量p:判斷選圖是否錯誤
	int a[15][15];
	int mode;
	interface();
	_getch();	//讀取是否要開始遊戲
	while (1)
	{
		system("cls");
		printf("\n\n\t\t請選擇一張地圖(1~10)：\t[1.2-->新手教學]\n");
		printf("\n\n\t\t1.發現(%d步)\t\t\t6.迷宮(%d步)\n\n\t\t2.環環相扣(%d步)\t\t\t7.尋找(%d步)\n\n\t\t3.分散(%d步)\t\t\t8.陰暗的階梯(%d步)\n\n\t\t4.監禁(%d步)\t\t\t9.陰暗的走道(%d步)\n\n\t\t5.脫困(%d步)\t\t\t10.解放詛咒(%d步)\n", result[0], result[5], result[1], result[6], result[2], result[7], result[3],result[8], result[4], result[9]);
		p = 0;
		i = 0;
		j = 0;
		printf("\n\n\t\t");
		scanf("%d", &mode);
		if (mode == 1 || mode == 2 || mode == 3)
		{
			if (mode == 1)
			{
				memcpy(map, map_1, sizeof(map_1));	//memecpy(a,b,c) -> 拷貝c個字符從b到a
			}
			else if (mode == 2)
			{
				memcpy(map, map_2, sizeof(map_2));

			}
			else
			{
				memcpy(map, map_3, sizeof(map_3));

			}
			n = count1(8, 8);

			while (1)
			{
				system("cls");	//清除畫面
				graphics(8, 8);
				printf("\n\t地圖 %d\t\t\t已動次數：%d(最佳步數：%d)\n\n", mode,i,result[mode-1]);
				m = count2(8, 8);
				find(8, 8);
				map[15][15] = move(mode);
				if (j == 1)
				{
					break;
				}
				if (n == m)
				{
					printf("\n\n");
					if (result[mode - 1] > i)
						printf("破紀錄了!!新紀錄：%d步\n\n",i);
					system("pause");
					break;
				}
			}
		}
		else if (mode == 4)
		{
			memcpy(map, map_4, sizeof(map_4));
			n = count1(7, 10);
			while (1)
			{
				system("cls");
				graphics(7, 10);
				printf("\n\t地圖 %d\t\t\t已動次數：%d(最佳步數：%d)\n\n", mode, i, result[mode - 1]);
				m = count2(7, 10);
				find(7, 10);
				map[15][15] = move(mode);
				if (j == 1)
					break;
				if (n == m)
				{
					printf("\n\n");
					if (result[mode - 1] > i)
						printf("破紀錄了!!新紀錄：%d步\n\n", i);
					system("pause");
					break;
				}
			}
		}
		else if (mode == 5 || mode == 6 || mode == 7 || mode == 8)
		{
			if (mode == 5)
			{
				memcpy(map, map_5, sizeof(map_5));
			}
			else if (mode == 6)
			{
				memcpy(map, map_6, sizeof(map_6));
			}
			else if (mode == 7)
			{
				memcpy(map, map_7, sizeof(map_7));
			}
			else
			{
				memcpy(map, map_8, sizeof(map_8));
			}
			n = count1(11, 11);
			while (1)
			{
				system("cls");
				graphics(11, 11);
				printf("\n\t地圖 %d\t\t\t已動次數：%d(最佳步數：%d)\n\n", mode, i, result[mode - 1]);
				m = count2(11, 11);
				find(11, 11);
				map[15][15] = move(mode);
				if (j == 1)
					break;
				if (n == m)
				{
					printf("\n\n");
					if (result[mode - 1] > i)
						printf("破紀錄了!!新紀錄：%d步\n\n", i);
					system("pause");
					break;
				}
			}
		}
		else if (mode == 9 || mode == 10)
		{
			if (mode == 9)
			{
				memcpy(map, map_9, sizeof(map_9));
			}
			else
			{
				memcpy(map, map_10, sizeof(map_10));
			}
			n = count1(15, 15);
			while (1)
			{
				system("cls");
				graphics(15, 15);
				printf("\n\t地圖 %d\t\t\t已動次數：%d(最佳步數：%d)\n\n", mode, i, result[mode - 1]);
				m = count2(15, 15);
				find(15, 15);
				map[15][15] = move(mode);
				if (j == 1)
					break;
				if (n == m)
				{
					printf("\n\n");
					if (result[mode - 1] > i)
						printf("破紀錄了!!新紀錄：%d步\n\n", i);
					system("pause");
					break;
				}
			}
		}
		else
		{
			system("cls");
			p = 1;
		}
		if (j != 1 && p==0)
		{
			do
			{
				system("cls");
				printf("\n\t\t成功過關~~~~~~\t你的步數：%d\n",i);
				if (result[mode-1] == 0)
					result[mode-1] = i;
				if(result[mode-1]>i)
					result[mode-1] = i;
				printf("\n\t\t重新開始請按1\n\n\t\t結束遊戲請按0\n\n\t\t");
				scanf("%d", &z);
				if (z == 0)
				{
					exit(0);
				}
				else if (z == 1)
				{
					continue;
				}
			} while (z!=1);
			if (z == 0)
			{
				break;
			}
		}
	}
	printf("\n\t\t");
	system("pause");
}
//制作主界面
int interface()
{
	printf(
		   "\n\n\t\t-----------------起源------------------\n\n"
		   "\t\t很久以前，在一個廢墟裡有著一"
		   "堆明亮的星星\n"
		   "\t\t而如今他們受到了詛咒\n"
			"\t\t若要化解詛咒\n"
			"\t\t星星需要明亮的心\n"
			"\t\t現在星星們需要你的幫助\n"
			"\t\t快去讓它恢復原本明亮的樣子吧\n"
		   "\n\n\t\t");
		system("pause");
		printf("\n\n\t\t-------------操作--------------\n\n"
			"\t\t使用WASD鍵控制上下左右\n"
			"\n\n\n\t\t");	
		system("pause");
		system("cls");
		printf("\n\n\t\t-------------遊戲即將開始--------------\n\n"
				"\n\t\t請按任意鍵繼續 . . .");
		return 0;
}
